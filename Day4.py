{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "#Lab 3\n",
    "# Cau 1\n",
    "\n",
    "x = np.array([1,2,3])\n",
    "y = np.array([[2,4,6],[6,4,2]])\n",
    "print(\"Ma tran x = \\n\",x)\n",
    "print(\"Ma tran y = \\n\",y)\n",
    "\n",
    "# tile(matran,(n,m)): n-> số lần lặp lại theo hàng, m-> số lần lap lai theo cot\n",
    "\n",
    "# matra.reshape(n,m): n-> số hàng, m: cột\n",
    "x = np.array([1,2,3,4,5])\n",
    "b = np.array([1,2,3,4,5,6])\n",
    "c = np.arange(1,31,1)\n",
    "d = np.arange(1,26,1)\n",
    "\n",
    "print(\"Cau 1:\")\n",
    "print(\"a)\")\n",
    "A = np.tile(x,(5,1))\n",
    "A = np.transpose(A)\n",
    "print(\"Ma tran A = \\n\",A)\n",
    "\n",
    "print(\"b)\")\n",
    "B = np.tile(b,(5,1))\n",
    "print(\"Ma tran B = \\n\",B)\n",
    "\n",
    "print(\"c)\")\n",
    "C = c.reshape(6,5).T # c.T = np.transpose(c)\n",
    "print(\"Ma tran c = \\n\",C)\n",
    "\n",
    "\n",
    "print(\"d)\")\n",
    "D = d.reshape(5,5)\n",
    "print(\"Ma tran c = \\n\",D)\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 2\n",
    "import random\n",
    "print(\"Cau 2\")\n",
    "\n",
    "a = 2\n",
    "b = 7\n",
    "\n",
    "res = np.random.randint(a,b+1,size=30).reshape(5,6)\n",
    "res = np.random.randint(a,b+1,size=(5,6))\n",
    "print(\"Random matrix = \\n\",res)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 3\n",
    "print(\"Cau 3:\")\n",
    "a = np.arange(1,10,1).reshape(3,3)\n",
    "res = np.flip(a,1)\n",
    "print(\"Flipped array: \\n\",res)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 4\n",
    "print(\"Cau 4:\")\n",
    "res = np.flip(a,0)\n",
    "print(\"Flipped array: \\n\",res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 5\n",
    "print(\"Cau 5:\")\n",
    "Y= np.array([\n",
    "[1,2,16,31,22],\n",
    "[2,8,12,21,23],\n",
    "[4,9,11,14,25],\n",
    "[3,6,10,16,24]\n",
    "])\n",
    "\n",
    "print(\"a)\")\n",
    "print(Y[1,np.arange(1,4)])\n",
    "\n",
    "print(\"b)\")\n",
    "print(Y[0:4:1,2])\n",
    "\n",
    "print(\"c)\")\n",
    "print(Y[1:3:1,1:4:1])\n",
    "\n",
    "print(\"d)\")\n",
    "print(Y[0:4:1,0:5:2])\n",
    "\n",
    "print(\"e)\")\n",
    "e =Y[1:4,0:1]\n",
    "e = np.append(e,Y[1:4,2:5],axis=1)\n",
    "print(e)\n",
    "\n",
    "print(\"f)\")\n",
    "res = Y[Y>12]\n",
    "print(res)\n",
    "\n",
    "print(\"Collum: \",len(Y[0]))\n",
    "print(\"Row: \",len(Y))\n",
    "print(\"Matrix: \",len(Y)*len(Y[0]))\n",
    "\n",
    "# np.delete(matrix,m,op)\n",
    "# op = 1 delete hang\n",
    "# op = 0 delete cot\n",
    "# m so hang hoac cot\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cau 6\n",
    "print(\"Cau 6:\")\n",
    "a = np.array([\n",
    "    [2,4,1],\n",
    "    [6,7,2],\n",
    "    [3,5,9]\n",
    "])\n",
    "\n",
    "print(\"a)\")\n",
    "x1 = a[0:1,0:3]\n",
    "print(\"x1 = \",x1)\n",
    "\n",
    "print(\"b)\")\n",
    "y = a[1:3,0:3]\n",
    "print(\"Y = \",y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cau 7\n",
    "print(\"Cau 7\")\n",
    "A = np.array([\n",
    "    [2,7,9,7],\n",
    "    [3,1,5,6],\n",
    "    [8,1,2,5]\n",
    "])\n",
    "\n",
    "print(\"a)\")\n",
    "B = A[0:3,0:4:2]\n",
    "print(\"B = \\n\",B)\n",
    "\n",
    "print(\"b)\")\n",
    "C = A[1:3:2,0:4]\n",
    "print(\"C = \",C)\n",
    "\n",
    "print(\"c)\")\n",
    "C = A.T\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cau 8\n",
      "Tong so tien:  337\n"
     ]
    }
   ],
   "source": [
    "#Cau 8\n",
    "print(\"Cau 8\")\n",
    "\n",
    "a = np.array([\n",
    "    [12,15,10,16,12],\n",
    "    [5,9,14,7,10],\n",
    "    [8,12,10,9,15]\n",
    "])\n",
    "\n",
    "b = np.array([2,1,3])\n",
    "res = b@a\n",
    "\n",
    "print(\"Tong so tien: \",res.sum(axis=0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 9\n",
    "print(\"Cau 9\")\n",
    "T = np.array([\n",
    "    [0.6,0.7],\n",
    "    [0.4,0.3]\n",
    "])\n",
    "\n",
    "p = np.array([0.5,0.5])\n",
    "\n",
    "k = [1,2,10,100,100000]\n",
    "\n",
    "for i in k:\n",
    "    res = np.linalg.matrix_power(T,i)@p\n",
    "    print(\"k = {} \\n=> pk = {}\".format(i,res))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 10\n",
    "print(\"Cau 10\")\n",
    "A = np.array([\n",
    "    [-1,4,8],\n",
    "    [-9,1,2]\n",
    "])\n",
    "B = np.array([\n",
    "    [5,8],\n",
    "    [0,-6],\n",
    "    [5,6]\n",
    "])\n",
    "C = np.array([\n",
    "    [-4,1],\n",
    "    [6,5]\n",
    "])\n",
    "D = np.array([\n",
    "    [-6,3,1],\n",
    "    [8,9,-2],\n",
    "    [6,-1,5]\n",
    "])\n",
    "print(\"a)\")\n",
    "try:\n",
    "    res = B.T\n",
    "    res = A@res\n",
    "    print(res)\n",
    "except:\n",
    "    print(\"Can't compute\") \n",
    "print(\"b)\")\n",
    "try:\n",
    "    res = C.T\n",
    "    res = B@res\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\") \n",
    "print(\"c)\")\n",
    "try:\n",
    "    res = C.T\n",
    "    res = C - res\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"d)\")\n",
    "try:\n",
    "    res = D.T\n",
    "    res = D - res\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\") \n",
    "print(\"e)\")\n",
    "try:\n",
    "    res = D.T\n",
    "    res = res.T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\") \n",
    "print(\"f)\")\n",
    "try:\n",
    "    res = 2*C.T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"g)\")\n",
    "try:\n",
    "    res = A.T +B\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"h)\")\n",
    "try:\n",
    "    res = A.T +B\n",
    "    res = res.T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"i)\")\n",
    "try:\n",
    "    res = 2*A.T - 5*B\n",
    "    res = res.T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"j)\")\n",
    "try:\n",
    "    res = -D\n",
    "    res = res.T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"k)\")\n",
    "try:\n",
    "    res = D.T\n",
    "    res = -res\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"l)\")\n",
    "try:\n",
    "    res = np.linalg.matrix_power(C,2).T\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")\n",
    "print(\"m)\")\n",
    "try:\n",
    "    res = np.linalg.matrix_power(C.T,2)\n",
    "    print(\"result = \\n\",res)\n",
    "except:\n",
    "    print(\"Can't compute\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cau 11\n",
    "print(\"Cau 11:\")\n",
    "\n",
    "A = np.array([\n",
    "    [2,4,1],[6,7,2],[3,5,9]\n",
    "])\n",
    "\n",
    "if len(A) == len(A[0]) and np.array_equal(A,A.T):\n",
    "   print(\"A la ma tran doi xung\") \n",
    "else:\n",
    "    print(\"A Khong la ma tran doi xung\") \n"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "cf6663ca35ebd57d6121109460e534e72c1e1f8ff142ad985cdcb4b7e585eb79"
  },
  "kernelspec": {
   "display_name": "Python 3.9.9 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
